version: 2.1
# orbs:
#   docker: circleci/docker@0.5.20
#   go: circleci/go@0.2.0
#   snyk: snyk/snyk@0.0.8
#   versioning: kollex/versioning@1.0.0
#   semver-orb: tv2norge/semver-orb@0.0.1

jobs:
  package: # defines a parameterized job
    description: Create the Splunk Packages and run appinspect
    docker:
      - image: circleci/python:2.7
    steps:
      - checkout
      - run:
          name: Install Slim
          command: |
            pip install virtualenv
            mkdir ~/.venv
            virtualenv ~/.venv
            source ~/.venv/bin/activate
            pip install semantic_version
            pip install https://download.splunk.com/misc/packaging-toolkit/splunk-packaging-toolkit-1.0.0.tar.gz
            pip install git+https://github.com/pixelb/crudini
      - run:
          name: version and package
          command: |
            source ~/.venv/bin/activate
            VERSION=$(./semtag getcurrent)
            VERSION_SPLUNK=$(echo $VERSION | sed 's/\-[^+]*+/B/g' | sed 's/v//')
            VERSION_PACKAGE=$(echo $VERSION | sed 's/\-[^+]*+/-B/g' | sed 's/v//')
            VERSION_DOCKER_M=$(echo  $VERSION | sed -n 's/v\([0-9]\).*/\1/p')
            VERSION_DOCKER_MM=$(echo  $VERSION | sed -n 's/v\([0-9]*\.[0-9]*\).*/\1/p')
            VERSION_DOCKER_MMP=$(echo  $VERSION | sed -n 's/v\([0-9]*\.[0-9]*\.[0-9]*\).*/\1/p')
            PACKAGE_ID=$(crudini --get package/default/app.conf id name)
            BUILD_DIR=build/source/$PACKAGE_ID
            mkdir -p $BUILD_DIR
            cp -r package/* $BUILD_DIR/
            crudini --set $BUILD_DIR/default/app.conf launcher version $VERSION_SPLUNK
            crudini --set $BUILD_DIR/default/app.conf id version $VERSION_SPLUNK
            crudini --set $BUILD_DIR/default/app.conf install build $(date +%s)
            slim generate-manifest $BUILD_DIR --update >/tmp/app.manifest   || true
            cp  /tmp/app.manifest  $BUILD_DIR/app.manifest
            mkdir -p build/package/splunkbase
            mkdir -p build/package/deployment
            slim package -o build/package/splunkbase $BUILD_DIR 
            ls build/package/splunkbase
      - store_artifacts:
          path: build/source
          destination: build-source
      - store_artifacts:
          path: build/package
          destination: build-package
      - persist_to_workspace:
          root: build
          paths:
            - package/splunkbase/*

test_appinspect: # defines a parameterized job
  description: Create the Splunk Packages and run appinspect
  docker:
    - image: circleci/python:3.7
  steps:
    - checkout
    - run:
        name: Install
        command: |
          python -m venv ~/.venv
          source ~/.venv/bin/activate
          pip install https://download.splunk.com/misc/appinspect/splunk-appinspect-latest.tar.gz
    - attach_workspace:
        at: /tmp/workspace
    - run:
        name: inspect
        command: |
          source ~/.venv/bin/activate
          mkdir test-results
          splunk-appinspect inspect $(ls /tmp/workspace/build/splunkbase/*) --mode test --data-format junitxml --output-file test-results/appinspect-mode-test.xml
    - store_artifacts:
        path: test-results
        destination: test-results

workflows:
  build:
    jobs:
      - package
      - test_appinspect:
          requires:
            - package
# test: &test
#   steps:
#     - checkout
#     - setup_remote_docker:
#         docker_layer_caching: true
#     - run:
#         name: Setup for testing
#         command: |
#           pip install -r tests/requirements.txt
#           mkdir test-results
#     - semver-orb/export-tag
#     - run:
#         name: test
#         command: |
#           docker-compose -f tests/docker-compose-ci.yml build
#           docker-compose -f tests/docker-compose-ci.yml up --abort-on-container-exit
#         no_output_timeout: 1h
#     - run:
#         name: collect results
#         when: always
#         command: |
#           docker container create --name dummy \
#                               -v tests_results:/work/test-results \
#                               registry.access.redhat.com/ubi7/ubi
#           docker cp dummy:/work/test-results/test.xml test-results/
#     - store_artifacts:
#         path: test-results
#         destination: test-results
#     - store_test_results:
#         path: test-results

# publish: &publish
#   steps:
#     - setup_remote_docker:
#         docker_layer_caching: true
#     - checkout
#     - run:
#         name: Docker Login
#         command: |
#           docker login -u $DOCKER_USER -p $DOCKER_PASS
#     - semver-orb/export-tag
#     - run:
#         name: Build
#         command: |
#           echo $SEMVER_VERSION >package/VERSION
#           SCONS
#     - go/install
#     - run:
#         name: "Publish edge on GitHub"
#         command: |
#           PATH=$PATH:/usr/local/go/bin
#           go get -v -u github.com/tcnksm/ghr
#           if [ -n "${CIRCLE_TAG}" ]; then VERSION=${CIRCLE_TAG}; else VERSION="${DOCKER_TAG}"; fi
#           $HOME/go/bin/ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} ${GHR_FLAGS} -delete ${VERSION} /tmp/workspace/

#     - store_artifacts:
#         path: /tmp/workspace/

# jobs:
#   test-splunk-8-0:
#     docker:
#       - image: circleci/python:3.7
#     environment:
#       SPLUNK: "8.0"
#     <<: *test
#   test-splunk-7-3:
#     docker:
#       - image: circleci/python:3.7
#     environment:
#       SPLUNK: "7.3"
#     <<: *test
#   test-splunk-7-2:
#     docker:
#       - image: circleci/python:3.7
#     environment:
#       SPLUNK: "7-2"
#     <<: *test

#   inspect:
#     docker:
#       - image: circleci/python:3.7
#     steps:
#       - checkout
#       - setup_remote_docker:
#           docker_layer_caching: true
#       - run:
#           name: Install Appinspect
#           command: |
#             pip install https://download.splunk.com/misc/appinspect/splunk-appinspect-latest.tar.gz
#       - run:
#           name: Install Build deps
#           command: |
#             pip install -r requirements_test.txt
#       - run:
#           name: build
#           command: |
#             mkdir test-results
#             scons
#       - run:
#           name: appinspect test
#           command: |
#             splunk-appinspect inspect --data-format junitxml --output-file test-results/appinspect-test.xml --excluded-tags manual build/$(ls  build) || true
#       - run:
#           name: appinspect precert
#           command: |
#             splunk-appinspect inspect --data-format junitxml --output-file test-results/appinspect-precert.xml --excluded-tags manual --mode=precert build/$(ls  build) || true
#       - run:
#           name: appinspect cloud
#           command: |
#             splunk-appinspect inspect --data-format junitxml --output-file test-results/appinspect-cloud.xml --excluded-tags manual --mode precert --included-tags cloud build/$(ls  build) || true

#   publish-edge:
#     docker:
#       - image: circleci/python:3.7
#     environment:
#       SPLUNK: "8.0"
#       DOCKER_TAG: edge
#       GHR_FLAGS: -prerelease
#     <<: *publish
#   publish-latest:
#     docker:
#       - image: circleci/python:3.7
#     environment:
#       SPLUNK: "8.0"
#       DOCKER_TAG: latest
#     <<: *publish
#   publish-tag:
#     docker:
#       - image: circleci/python:3.7
#     environment:
#       SPLUNK: "8.0"
#     <<: *publish
# workflows:
#   version: 2
#   build_and_deploy:
#     jobs:
#       - test-splunk-8-0
#       - test-splunk-7-3
#       - test-splunk-7-2
#       - publish-pre-gh-edge:
#           type: approval
#           requires:
#             - test-splunk-8-0
#           filters:
#             branches:
#               only:
#                 - develop
#       - publish-edge:
#           requires:
#             - publish-pre-gh-edge
#       - publish-pre-gh-latest:
#           type: approval
#           requires:
#             - test-splunk-8-0
#           filters:
#             branches:
#               only:
#                 - master
#       - publish-latest:
#           requires:
#             - publish-pre-gh-latest
#       - publish-pre-gh-tag:
#           type: approval
#           requires:
#             - test-splunk-8-0
#           filters:
#             tags:
#               only: /^\d*\.\d*\.\d*.*$/
#             branches:
#               ignore: /.*/
#       - publish-tag:
#           requires:
#             - publish-pre-gh-tag
