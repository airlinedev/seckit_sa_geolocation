{"basic_builder": {"appname": "SecKit_SA_geolocation", "friendly_name": "SecKit_SA_geolocation", "version": "5.0.0", "author": "Ryan Faircloth", "description": "Maxmind lookup", "theme": "#65A637", "large_icon": "iVBORw0KGgoAAAANSUhEUgAAAEgAAABICAYAAABV7bNHAAAIVUlEQVR4Xu3cB4/bOBAFYG1677135P//miBI7733evh4NwuulrKkleVNcCJgxGvRNPnmvTdDSndL1dRmIrA04TMbgQmgFoZMAE0ADTORiUFrZdC1a9d+D8P+7/r21atXi2RpZNAE0L8BngD6j+gTg1oUPwE0ATQsKUwM+psZtHXr1mrXrl0rlvD+/fvq27dvw2jR49t/NIOOHz9ebdu2bRkQgH348KF69uxZjyUO67quAC0tLVV79+5Ni/7x48eqlZw9e7Z6+/Zt9ebNm3Tt4MGD1fbt26sHDx6s6rtly5Zqx44dqf/v3/OrZdcNoN27d1eHDx+uNm7cmBhy7969CkN8DgTvAXj//v3q8+fPCRByO3HiRALg69ev1adPnyqS+/79ewXMTZs2JaCfP3+eQJ9HWzhAADl58mQC4OXLlyniZ86cSYsDiEV//PgxAfDly5fq169fK9bp+75Lejt37kxg6gMkYO7fv786cOBAAvXhw4eD2bRwgABx4cKFJBNgaORhoaL+8+fPXoE3HmblMsXCY8eOVTdv3lwFcK/Bq6paOEAmiEGk8PTp077z7dSfDLHqyZMnnfrP6rRwgMjj1KlTSUalBZAZNnlhVkiP72AXvyI97KvLLxYaEiY50hvSFgqQRQPn3bt3q9izefPm5B3ksWHDhuRBXpgGCMABC2j8x99Afv369bJUAwjXSIxHkTJA19pGBYihmqxFYg4zfvXqVTLnaPocOnQopXsLkdL5SRM74nsWv2fPngQoQybXegF55MiR1Ofu3buJSYKAhW1j52COChBARFuk/Wvhue9gVPiFz8O0+0TbogEBMOkdo/JmfMEBkDrJXGS3rm00gCKTmIz3mJR7jsiSQciNx+hjsbISeelfLyDzPhgHWH327duXvqtsyIOgv4pcH+DwpzyDtgE1CkAmdf78+SQXkqq3AOfFixcrrkcNgwkWbFGPHj1a8fVZfTAEYxSPTRlScYptd+7cacMmXR8FIIszkVu3bq2qa0iN9PhQ7kUmg1Ea5vAkWwtj5A0bsC36MPbbt28vdyHb06dPV3XwowNJCt7jx48TkG1tFIBkG1SWjUgszDOYxVRNsN7yxWMZ8y4BxGQxpAnEkBtzJtVoUWKYD2Z2KUpHAciEgHHx4sVknHxBs2ALR+9SJpkXQH6L1ATKHi8atgGvDvosFo0GUEhJuS9S0rkthsgz5lKbJ0CxpcFg5qyRlzkAqGsBORpAPAil42hC9Egi94uxJBbj8jRA5ccjdv28p5Q8SkEbDSBGbCJRl5w7dy79nRuziFoEYyVJTX8HYkoDMim1Uh/GjRXMO45HwrAxJsoFMhe4rrXQaABdvnw5TULxJ4r8iPfkpimbWJQFhye5Hu8tsNRKfQCsfgqWBiDhgyFrwKuXSL9LmytAIkNK9kve37hxIy3WpI4ePZr+jtYEWpdJz+pz6dKl5HORwrGQB0ZdFD6EZYKD0bPOuOcKkLpFlsIIUQ6q+1xxlmcUEceyPlVtG3ilMUkKE+3soykoI5gAiiPd0T0IELJXXd8oLXL1z/mSEqC+f2oDoul6ZM5grn4qb7IrVc58kvTWHSDyUjTWi0MGLeqlonEtIKlxAJJnSuDUq+0Ye10AMiGsILE4OEdz0a3fjSgtaC3A5Gm9DjhwmHcub57IJ/3+QiUWPxq3YKJIFNU4l8kBKEliCEAlyarHzCfk7b3sKXiRQWcVjXM16XxxeZpn0LIJb8jvWc3TqJvGcoKJzbY8Wtxu6rrdGA0g+hYlFSv/kX7ze1wBpqgzyq6VbRPDoijMDVpfgeJxIfc6o9oYOxpA9fQKMGk/Ipn7BgDr5z5tE69fL/kZ5jpVyEHrmzlHA0idYd8TZT7zFj2+lMvMwhhpV8o3AWejq+UZETgK1fisPqcuQRgNIKywc3Zwpc6I4w9ZI697GDUgRbnL+UzTohivcaOmCTByWavTYivS9f79KADJFBE92SP2RbKZSSra8rNm/pSfG3WJbN4HGKSj/oltA0kDPC9Om+Y16/dGASiOXEu3fksTBxrw4vZMH4Aw05gADzCMxQMBVj/0/yOOXE06slP93FkUo4KN53z0d45sA8svYg/XBlQclziMIyWMiSdAms6cbXtkPMHo0kZhkB82UcbpfCZu+8hUtB93WPlFZDWeZUuiL5moXfxbPz9i6AAFjnGUCICOUwPbl/zmpHHjWQAni66Xyo0msEYDyA8q0izC0YMddH5YH7dofAbEMGh+Ij0zb2Bdv359OeuRLukABXgWHFUwmXrV72aYA2YC3Hjm0mfvNypAIu0luiIuW0XEAegz0bWAyHYRyVJ2K+3MAU02xgB0/uAUtrhuH8aLSNFcumYwcxkVoDptLVpEnTKKYkw0spvJA9BmN24R5Qfs5BV3RaRrjMI4/QEcLCQrWxt+Z4M85KHPhQIUrIn9UV49i67Fe2kykuPSPHWTEJk4HeRv5MLH6ptNhm884JSefexiztFn4QCFN4nqrKdVscA+SraJx1fixHLWnRHjl6rqPqDkfRcOUNQh+f2qMOZ4IDMmeOXKlRVHsiWAyCjMN6QU9/7juGWt4Czcg/wgZoiwTBVbA3URPwIetsRDnEw234nHVkFpEA9xAoiMfF/6jrunwGbafQy5BOTCGRSTiOxjgVK9xQEoHgMGgMzEb/LnpKV5npM/BsycZUhj+Zx0uxabbexaN4BiYgCR1Uob1frNx6ajW2MBM2qutkX3ub7uAM2aLCliWmQpDCOd/81/itAWyTjbzvvl1XPb9+dx/Y9m0DwWOHSMCaAWBCeAJoCGiWxi0MSgiUHDEJg3g0adzV80+PR/f2kJ1gTQBNAwPU8Mmhg0jEH/ACYOz6MiFrtGAAAAAElFTkSuQmCC", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAADHUlEQVRYR+2YeU8qQRDEG0XEE0HxRvD2+38a8MI7XoiCCohG8+u83owIC7u++MiL/Ze6OzPVVdU1GyPSZxXpMzzS34Dy+fz7v2BsZ2fHI+YTQ7+A/sjxfzMUj8e1z0gkIq+vr9JsNgPbMDRDAwMDsrGxIfV6XWq1miSTSXl8fJSLiwsFsbi4KOPj43J3dycAHRkZkf39fXl/95+V0IASiYQ8PDz0zACsAbBarfquCQ0Idg4ODryO5+fnBZAwwOFvb29yfX0tlUrFk3FtbU3X+FUgQMg0MTEh6XRa6aey2aw8PT3J7e3tl3MAtrq6qsCQkwJUuVyW+/v7tvIFArS1tSW7u7vKAEzY7xy0ubmpRi4Wi56H8M3h4aGMjY2pXJeXl95a3t/b2/vSRCBAKysrcnJyopsgmbE0NDSkAHkOAGp7e1sKhYJMTk6qbACiEfNQLpeTo6Oj7wFCqpubG+2YkX55edENewHEe8hnDKZSKZ3A1grEkElk3bPZ1NSUxGIx3RyGzMTT09PK0NLSkjw/P6tv7H384+7hguoZEFlCV+SMMTUzMyOlUqlrtnCgyW3eyWQyyjY5FhoQi/HB8PCwbgQ7dNtLEZQ045oZ6ZnQUICYGBKZ0cczjUZDwfF3JPEr9z13GDC6xYGt71kyQCAVXbopbZ37AXKZNO8gGTHQet/1DIgDzdSEm423m0WdQLkjjsnPz88/ZVgoyViEiUlklxWS+vj42FcyAw1T3H9kFpexTV5oQMvLy3J2dqbrrevR0VG9t/BUu8JzACEW3BxyQzY0ICbE0pnsIYUZXfyAseme64OKRqOazrxDuhtLAISh9fV1b6/QgOwTYnZ2Vm9tsmlubs6TDGCnp6e6vxkfYHiOO5CCJbLLArSV1UCmdhdzCNcA3QJkcHBQs4nJofgqWFhYkKurK2UOZvCbXR2dTBcaUDtTmukNkPsxBruA7MRM4Bxq7YgDCDlyhEPIKH62OEAasguPAQTPmf/8RjI0Q+02xVNIB1im7kc/8n2D5xsP/ypD38DhLf0F1I3Fjgx1W/gTz/v7/0M/wUC3Mz4Az5AlQ2jnGgQAAAAASUVORK5CYII=", "visible": true, "tab_version": "3.0.1", "tab_build_no": "2", "build_no": 1}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "geoipupdate", "interval": "30", "use_external_validation": true, "streaming_mode_xml": true, "name": "geoipupdate", "title": "geoipupdate", "description": "", "type": "customized", "parameters": [{"name": "edition_ids", "label": "Edition IDs", "help_string": "", "required": true, "format_type": "text", "default_value": "GeoLite2-Country GeoLite2-City", "placeholder": "", "type": "text", "value": "GeoLite2-Country GeoLite2-City"}, {"name": "global_account", "label": "Global Account", "help_string": "", "required": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": "", "type": "global_account", "value": ""}], "data_inputs_options": [{"type": "customized_var", "name": "edition_ids", "title": "Edition IDs", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "GeoLite2-Country GeoLite2-City", "placeholder": ""}, {"type": "customized_var", "name": "global_account", "title": "Global Account", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\n\n'''\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n'''\n'''\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n'''\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # edition_ids = definition.parameters.get('edition_ids', None)\n    # global_account = definition.parameters.get('global_account', None)\n    pass\n\ndef collect_events(helper, ew):\n    \"\"\"Implement your data collection logic here\n\n    # The following examples get the arguments of this input.\n    # Note, for single instance mod input, args will be returned as a dict.\n    # For multi instance mod input, args will be returned as a single value.\n    opt_edition_ids = helper.get_arg('edition_ids')\n    opt_global_account = helper.get_arg('global_account')\n    # In single instance mode, to get arguments of a particular input, use\n    opt_edition_ids = helper.get_arg('edition_ids', stanza_name)\n    opt_global_account = helper.get_arg('global_account', stanza_name)\n\n    # get input type\n    helper.get_input_type()\n\n    # The following examples get input stanzas.\n    # get all detailed input stanzas\n    helper.get_input_stanza()\n    # get specific input stanza with stanza name\n    helper.get_input_stanza(stanza_name)\n    # get all stanza names\n    helper.get_input_stanza_names()\n\n    # The following examples get options from setup page configuration.\n    # get the loglevel from the setup page\n    loglevel = helper.get_log_level()\n    # get proxy setting configuration\n    proxy_settings = helper.get_proxy()\n    # get account credentials as dictionary\n    account = helper.get_user_credential_by_username(\"username\")\n    account = helper.get_user_credential_by_id(\"account id\")\n    # get global variable configuration\n    global_userdefined_global_var = helper.get_global_setting(\"userdefined_global_var\")\n\n    # The following examples show usage of logging related helper functions.\n    # write to the log for this modular input using configured global log level or INFO as default\n    helper.log(\"log message\")\n    # write to the log using specified log level\n    helper.log_debug(\"log message\")\n    helper.log_info(\"log message\")\n    helper.log_warning(\"log message\")\n    helper.log_error(\"log message\")\n    helper.log_critical(\"log message\")\n    # set the log level for this modular input\n    # (log_level can be \"debug\", \"info\", \"warning\", \"error\" or \"critical\", case insensitive)\n    helper.set_log_level(log_level)\n\n    # The following examples send rest requests to some endpoint.\n    response = helper.send_http_request(url, method, parameters=None, payload=None,\n                                        headers=None, cookies=None, verify=True, cert=None,\n                                        timeout=None, use_proxy=True)\n    # get the response headers\n    r_headers = response.headers\n    # get the response body as text\n    r_text = response.text\n    # get response body as json. If the body text is not a json string, raise a ValueError\n    r_json = response.json()\n    # get response cookies\n    r_cookies = response.cookies\n    # get redirect history\n    historical_responses = response.history\n    # get response status code\n    r_status = response.status_code\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\n    response.raise_for_status()\n\n    # The following examples show usage of check pointing related helper functions.\n    # save checkpoint\n    helper.save_check_point(key, state)\n    # delete checkpoint\n    helper.delete_check_point(key)\n    # get checkpoint\n    state = helper.get_check_point(key)\n\n    # To create a splunk event\n    helper.new_event(data, time=None, host=None, index=None, source=None, sourcetype=None, done=True, unbroken=True)\n    \"\"\"\n\n    '''\n    # The following example writes a random number as an event. (Multi Instance Mode)\n    # Use this code template by default.\n    import random\n    data = str(random.randint(0,100))\n    event = helper.new_event(source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=data)\n    ew.write_event(event)\n    '''\n\n    '''\n    # The following example writes a random number as an event for each input config. (Single Instance Mode)\n    # For advanced users, if you want to create single instance mod input, please use this code template.\n    # Also, you need to uncomment use_single_instance_mode() above.\n    import random\n    input_type = helper.get_input_type()\n    for stanza_name in helper.get_input_stanza_names():\n        data = str(random.randint(0,100))\n        event = helper.new_event(source=input_type, index=helper.get_output_index(stanza_name), sourcetype=helper.get_sourcetype(stanza_name), data=data)\n        ew.write_event(event)\n    '''\n", "customized_options": [{"name": "edition_ids", "value": "GeoLite2-Country GeoLite2-City"}, {"name": "global_account", "value": "account0"}], "uuid": "cf64d693454b4231b6e20a5f89921f45"}]}, "global_settings_builder": {"global_settings": {"proxy_settings": {"proxy_type": "http"}, "log_settings": {"log_level": "DEBUG"}, "credential_settings": []}}, "sourcetype_builder": {"geoipupdate": {"metadata": {"event_count": 0, "data_input_name": "geoipupdate", "extractions_count": 0, "cims_count": 0}}}}